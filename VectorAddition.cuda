#include <iostream>
#include <chrono>
#include <cuda_runtime.h>
using namespace std;
using namespace chrono;

__global__ void addVectorsGPU(int *a, int *b, int *c, int n) {
    int i = threadIdx.x + blockIdx.x * blockDim.x;
    if (i < n) c[i] = a[i] + b[i];
}

int main() {
    const int N = 1000000;
    int *a = new int[N];
    int *b = new int[N];
    int *c_cpu = new int[N];
    int *c_gpu = new int[N];

    // Initialize input arrays
    for (int i = 0; i < N; i++) {
        a[i] = i;
        b[i] = N - i;
    }

    // ------------------- CPU Version -------------------
    auto start_cpu = high_resolution_clock::now();
    for (int i = 0; i < N; i++) {
        c_cpu[i] = a[i] + b[i];
    }
    auto end_cpu = high_resolution_clock::now();
    auto duration_cpu = duration_cast<milliseconds>(end_cpu - start_cpu);
    cout << "CPU Time (ms): " << duration_cpu.count() << endl;

    // ------------------- GPU Version -------------------
    int *d_a, *d_b, *d_c;
    cudaMalloc(&d_a, N * sizeof(int));
    cudaMalloc(&d_b, N * sizeof(int));
    cudaMalloc(&d_c, N * sizeof(int));

    cudaMemcpy(d_a, a, N * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, N * sizeof(int), cudaMemcpyHostToDevice);

    cudaEvent_t start_gpu, end_gpu;
    cudaEventCreate(&start_gpu);
    cudaEventCreate(&end_gpu);
    cudaEventRecord(start_gpu);

    addVectorsGPU<<<(N + 255)/256, 256>>>(d_a, d_b, d_c, N);

    cudaEventRecord(end_gpu);
    cudaEventSynchronize(end_gpu);
    float time_gpu;
    cudaEventElapsedTime(&time_gpu, start_gpu, end_gpu);

    cudaMemcpy(c_gpu, d_c, N * sizeof(int), cudaMemcpyDeviceToHost);

    cout << "GPU Time (ms): " << time_gpu << endl;

    // ------------------- Sample Output -------------------
    cout << "Result Check: CPU[0] = " << c_cpu[0] << ", GPU[0] = " << c_gpu[0] << endl;
    cout << "Result Check: CPU[N-1] = " << c_cpu[N-1] << ", GPU[N-1] = " << c_gpu[N-1] << endl;

    // Free memory
    delete[] a; delete[] b; delete[] c_cpu; delete[] c_gpu;
    cudaFree(d_a); cudaFree(d_b); cudaFree(d_c);

    return 0;
}
